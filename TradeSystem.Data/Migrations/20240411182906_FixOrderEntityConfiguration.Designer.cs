// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradeSystem.Data;

#nullable disable

namespace TradeSystem.Data.Migrations
{
    [DbContext(typeof(TradeSystemDbContext))]
    [Migration("20240411182906_FixOrderEntityConfiguration")]
    partial class FixOrderEntityConfiguration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TradeSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e392ce5-8c3a-40bc-9c08-bb96111d51fb",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@gmail.com",
                            NormalizedUserName = "admin@gmail.comm",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ6CuJE6Zr7K7U91/EGfzF4HkBP9YSOAnyFw6KAej7/h5S4UVcqZqgoUL0ydNo5h2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59f3fc5e-95cb-4b96-a1c3-787158170deb",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "4a6e690e-7d13-4c7e-88e9-8d7f10f456bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42e9b49d-57be-43eb-ba65-41c9d92425ae",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "employee@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "employee@gmail.com",
                            NormalizedUserName = "employee@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBKlcK8OCDU776t/GgBLD5vvwomh40nqGXbh6MD3XWMJQ2YQ6rVqhi+PElzzAEK2AQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "865c5e67-2a3c-47f5-8b7c-0020706f9f3f",
                            TwoFactorEnabled = false,
                            UserName = "employee@gmail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d568a4b9-1e86-4055-b358-aac17c063419",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "individual@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "individual@gmail.com",
                            NormalizedUserName = "individual@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJU3qetB9luKwT+BsV5mIVOF9Kl4X5hbP1PzZjoJYf4hqb3mxk2llXg1DViAwpB8Aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "896bc5a0-9ba5-4d63-aaa0-e42ae46af489",
                            TwoFactorEnabled = false,
                            UserName = "individual@gmail.com"
                        },
                        new
                        {
                            Id = "7586d7f6-e626-4e06-999e-7c977382c6de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b7dd7a4-5a5b-4058-abed-846c23c0726e",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "corporative@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "corporative@gmail.com",
                            NormalizedUserName = "corporative@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJUvKNlE0OMCdWYc2BcUMyzaoLZGpRiVET1BiEN0pXRFx4NHgQFLcaNJYA77Ow8GRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd5b44a8-eef7-4072-8236-5ce5cd2cd004",
                            TwoFactorEnabled = false,
                            UserName = "corporative@gmail.com"
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BlockedSum")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37d8ee74-9ead-4307-bd5c-6ad5f824edca"),
                            Balance = 50000m,
                            BlockedSum = 0m,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9048),
                            IsDeleted = false,
                            IsIndividual = true
                        },
                        new
                        {
                            Id = new Guid("660cb0ec-82b4-462c-8a0f-fdb6bf232f18"),
                            Balance = 70000m,
                            BlockedSum = 0m,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9059),
                            IsDeleted = false,
                            IsIndividual = false
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.ClientFinancialInstrument", b =>
                {
                    b.Property<int>("FinancialInstrumentId")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("FinancialInstrumentId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientFinancialInstruments");

                    b.HasData(
                        new
                        {
                            FinancialInstrumentId = 1,
                            ClientId = new Guid("37d8ee74-9ead-4307-bd5c-6ad5f824edca"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9138),
                            IsDeleted = false,
                            Volume = 5000L
                        },
                        new
                        {
                            FinancialInstrumentId = 2,
                            ClientId = new Guid("37d8ee74-9ead-4307-bd5c-6ad5f824edca"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9146),
                            IsDeleted = false,
                            Volume = 6000L
                        },
                        new
                        {
                            FinancialInstrumentId = 3,
                            ClientId = new Guid("660cb0ec-82b4-462c-8a0f-fdb6bf232f18"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9148),
                            IsDeleted = false,
                            Volume = 3000L
                        },
                        new
                        {
                            FinancialInstrumentId = 4,
                            ClientId = new Guid("660cb0ec-82b4-462c-8a0f-fdb6bf232f18"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9149),
                            IsDeleted = false,
                            Volume = 7000L
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(8847),
                            IsDeleted = false,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(8897),
                            IsDeleted = false,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(8898),
                            IsDeleted = false,
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.DataOfCorporateveClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AuthorisedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DataChecking")
                        .HasColumnType("int");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdentityDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LegalForm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameOfRepresentative")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NationalIdentityNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IdentityDocumentId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("TownId");

                    b.ToTable("DataOfCorporateClients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c2a6e70-1466-482c-8908-21f1ea3b5eb4"),
                            Address = "Krasna Polqna 58",
                            ApplicationUserId = "7586d7f6-e626-4e06-999e-7c977382c6de",
                            AuthorisedOn = new DateTime(2024, 4, 11, 21, 29, 5, 838, DateTimeKind.Local).AddTicks(9255),
                            ClientId = new Guid("660cb0ec-82b4-462c-8a0f-fdb6bf232f18"),
                            CreatedOn = new DateTime(2024, 4, 11, 21, 29, 5, 838, DateTimeKind.Local).AddTicks(9223),
                            DataChecking = 1,
                            EmployeeId = new Guid("4bcfd374-c252-4193-8bfe-5e84379984cf"),
                            LegalForm = "EOOD",
                            Name = "Corporation",
                            NameOfRepresentative = "Petar petrov",
                            NationalIdentityNumber = "6789945435677",
                            NationalityId = 1,
                            PhoneNumber = "3234456",
                            TownId = 1
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.DataOfIndividualClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AuthorisedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DataChecking")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("IdentityDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdentityNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IdentityDocumentId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("TownId");

                    b.ToTable("DataOfIndividualClients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f316a20f-0bfa-4412-81a1-50bcb6562bc0"),
                            Address = "Ovcha Kupel 58",
                            ApplicationUserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AuthorisedOn = new DateTime(2024, 4, 11, 21, 29, 5, 838, DateTimeKind.Local).AddTicks(9339),
                            ClientId = new Guid("37d8ee74-9ead-4307-bd5c-6ad5f824edca"),
                            CreatedOn = new DateTime(2024, 4, 11, 21, 29, 5, 838, DateTimeKind.Local).AddTicks(9336),
                            DataChecking = 1,
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("67524a1e-2595-440e-a6d2-103aaf179a08"),
                            FirstName = "Individual",
                            NationalIdentityNumber = "BC1245643566",
                            NationalityId = 1,
                            PhoneNumber = "1234456",
                            Surname = "Invidualov",
                            TownId = 1
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(6769),
                            Name = "Compliance"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(6785),
                            Name = "Authority Traders"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(6787),
                            Name = "Backoffice"
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67524a1e-2595-440e-a6d2-103aaf179a08"),
                            ApplicationUserId = "dea12856-c198-4129-b3f3-b893d8395082",
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(7860),
                            DivisionId = 1,
                            FirstName = "Admin",
                            IsApproved = true,
                            IsDeleted = false,
                            LastName = "Administrator",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("4bcfd374-c252-4193-8bfe-5e84379984cf"),
                            ApplicationUserId = "4a6e690e-7d13-4c7e-88e9-8d7f10f456bb",
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(7881),
                            DivisionId = 1,
                            FirstName = "Employee",
                            IsApproved = true,
                            IsDeleted = false,
                            LastName = "Employeev",
                            PhoneNumber = "2234567890"
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.FinancialInstrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ISIN")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FinancialInstruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(6997),
                            Description = "Financial and insurance activities",
                            ISIN = "BG1100016978",
                            IsDeleted = false,
                            Name = "BULGARIAN STOCK EXCHANGE"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(7003),
                            Description = "Manufacturing",
                            ISIN = "BG11SOSOBT18",
                            IsDeleted = false,
                            Name = "SOPHARMA"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(7004),
                            Description = "Financial and insurance activities",
                            ISIN = "BG1100019980",
                            IsDeleted = false,
                            Name = "INDUSTRIAL HOLDING BULGARIA"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 814, DateTimeKind.Utc).AddTicks(7006),
                            Description = "Financial and insurance activities",
                            ISIN = "BG1100003166",
                            IsDeleted = false,
                            Name = "SHELLY GROUP"
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.IdentityDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityDocuments");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ActiveVolume")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialInstrumentId")
                        .HasColumnType("int");

                    b.Property<long>("InitialVolume")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsBid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FinancialInstrumentId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98807339-c1a5-4c2e-81f2-7c15e493bec8"),
                            ActiveVolume = 0L,
                            ClientId = new Guid("37d8ee74-9ead-4307-bd5c-6ad5f824edca"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9417),
                            FinancialInstrumentId = 1,
                            InitialVolume = 100L,
                            IsBid = true,
                            IsDeleted = true,
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("4a2715ef-7648-4369-ba0e-2f9bdd3d79b3"),
                            ActiveVolume = 0L,
                            ClientId = new Guid("37d8ee74-9ead-4307-bd5c-6ad5f824edca"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9425),
                            FinancialInstrumentId = 2,
                            InitialVolume = 200L,
                            IsBid = true,
                            IsDeleted = true,
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("9edba98d-8ee3-4e2e-8c38-dd18477f5a81"),
                            ActiveVolume = 100L,
                            ClientId = new Guid("37d8ee74-9ead-4307-bd5c-6ad5f824edca"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9430),
                            FinancialInstrumentId = 1,
                            InitialVolume = 100L,
                            IsBid = false,
                            IsDeleted = false,
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("f74db81b-3dc9-4841-8bd0-6029600200aa"),
                            ActiveVolume = 200L,
                            ClientId = new Guid("37d8ee74-9ead-4307-bd5c-6ad5f824edca"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9432),
                            FinancialInstrumentId = 2,
                            InitialVolume = 200L,
                            IsBid = false,
                            IsDeleted = false,
                            Price = 5m
                        },
                        new
                        {
                            Id = new Guid("55a73acc-6a01-43bc-b8d1-f81cd707f335"),
                            ActiveVolume = 0L,
                            ClientId = new Guid("660cb0ec-82b4-462c-8a0f-fdb6bf232f18"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9436),
                            FinancialInstrumentId = 1,
                            InitialVolume = 100L,
                            IsBid = false,
                            IsDeleted = true,
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("417d6699-1b1d-45c9-9ebb-27fbef1dae84"),
                            ActiveVolume = 0L,
                            ClientId = new Guid("660cb0ec-82b4-462c-8a0f-fdb6bf232f18"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9439),
                            FinancialInstrumentId = 2,
                            InitialVolume = 200L,
                            IsBid = false,
                            IsDeleted = true,
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("c0cfddfe-946d-40b5-9911-e87f4c3598be"),
                            ActiveVolume = 100L,
                            ClientId = new Guid("660cb0ec-82b4-462c-8a0f-fdb6bf232f18"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9441),
                            FinancialInstrumentId = 3,
                            InitialVolume = 100L,
                            IsBid = false,
                            IsDeleted = false,
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("b5cf01f7-2fae-402e-b8f5-20b0ffcf4fac"),
                            ActiveVolume = 200L,
                            ClientId = new Guid("660cb0ec-82b4-462c-8a0f-fdb6bf232f18"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9443),
                            FinancialInstrumentId = 4,
                            InitialVolume = 200L,
                            IsBid = false,
                            IsDeleted = false,
                            Price = 5m
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(8972),
                            IsDeleted = false,
                            Name = "Sofia"
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialInstrumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FinancialInstrumentId");

                    b.ToTable("Trades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4824a81-6996-41a6-bf31-95dc69266175"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9549),
                            FinancialInstrumentId = 1,
                            IsDeleted = false,
                            Price = 10m,
                            Volume = 100L
                        },
                        new
                        {
                            Id = new Guid("7dcb44f7-26af-4ee0-96f3-fe9ea161823f"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9559),
                            FinancialInstrumentId = 2,
                            IsDeleted = false,
                            Price = 10m,
                            Volume = 200L
                        });
                });

            modelBuilder.Entity("TradeSystem.Data.Models.TradeOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId", "TradeId");

                    b.HasIndex("TradeId");

                    b.ToTable("TradeOrders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("55a73acc-6a01-43bc-b8d1-f81cd707f335"),
                            TradeId = new Guid("c4824a81-6996-41a6-bf31-95dc69266175"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9634),
                            IsDeleted = false,
                            Volume = 100L
                        },
                        new
                        {
                            OrderId = new Guid("98807339-c1a5-4c2e-81f2-7c15e493bec8"),
                            TradeId = new Guid("c4824a81-6996-41a6-bf31-95dc69266175"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9641),
                            IsDeleted = false,
                            Volume = 100L
                        },
                        new
                        {
                            OrderId = new Guid("4a2715ef-7648-4369-ba0e-2f9bdd3d79b3"),
                            TradeId = new Guid("7dcb44f7-26af-4ee0-96f3-fe9ea161823f"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9644),
                            IsDeleted = false,
                            Volume = 100L
                        },
                        new
                        {
                            OrderId = new Guid("417d6699-1b1d-45c9-9ebb-27fbef1dae84"),
                            TradeId = new Guid("7dcb44f7-26af-4ee0-96f3-fe9ea161823f"),
                            CreatedOn = new DateTime(2024, 4, 11, 18, 29, 5, 838, DateTimeKind.Utc).AddTicks(9646),
                            IsDeleted = false,
                            Volume = 100L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TradeSystem.Data.Models.ClientFinancialInstrument", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.Client", "Client")
                        .WithMany("FinancialInstruments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.FinancialInstrument", "FinancialInstrument")
                        .WithMany("OwnersOfThisInstruments")
                        .HasForeignKey("FinancialInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("FinancialInstrument");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.DataOfCorporateveClient", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("TradeSystem.Data.Models.Employee", "Employee")
                        .WithMany("CorporativeClients")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TradeSystem.Data.Models.IdentityDocument", "IdentityDocument")
                        .WithMany()
                        .HasForeignKey("IdentityDocumentId");

                    b.HasOne("TradeSystem.Data.Models.Country", "Nationality")
                        .WithMany("CorporativeClients")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.Town", "Town")
                        .WithMany("CorporativeClients")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("IdentityDocument");

                    b.Navigation("Nationality");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.DataOfIndividualClient", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("TradeSystem.Data.Models.Employee", "Employee")
                        .WithMany("IndividualClients")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TradeSystem.Data.Models.IdentityDocument", "IdentityDocument")
                        .WithMany()
                        .HasForeignKey("IdentityDocumentId");

                    b.HasOne("TradeSystem.Data.Models.Country", "Nationality")
                        .WithMany("InvidualClients")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.Town", "Town")
                        .WithMany("InvidualClients")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("IdentityDocument");

                    b.Navigation("Nationality");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Employee", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.IdentityDocument", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Order", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.FinancialInstrument", "FinancialInstrument")
                        .WithMany()
                        .HasForeignKey("FinancialInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("FinancialInstrument");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Town", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Trade", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.Client", null)
                        .WithMany("Trades")
                        .HasForeignKey("ClientId");

                    b.HasOne("TradeSystem.Data.Models.FinancialInstrument", "FinancialInstrument")
                        .WithMany()
                        .HasForeignKey("FinancialInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialInstrument");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.TradeOrder", b =>
                {
                    b.HasOne("TradeSystem.Data.Models.Order", "Order")
                        .WithMany("TradeOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradeSystem.Data.Models.Trade", "Trade")
                        .WithMany("TradeOrders")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Client", b =>
                {
                    b.Navigation("FinancialInstruments");

                    b.Navigation("Orders");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Country", b =>
                {
                    b.Navigation("CorporativeClients");

                    b.Navigation("InvidualClients");

                    b.Navigation("Towns");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Employee", b =>
                {
                    b.Navigation("CorporativeClients");

                    b.Navigation("IndividualClients");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.FinancialInstrument", b =>
                {
                    b.Navigation("OwnersOfThisInstruments");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Order", b =>
                {
                    b.Navigation("TradeOrders");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Town", b =>
                {
                    b.Navigation("CorporativeClients");

                    b.Navigation("InvidualClients");
                });

            modelBuilder.Entity("TradeSystem.Data.Models.Trade", b =>
                {
                    b.Navigation("TradeOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
